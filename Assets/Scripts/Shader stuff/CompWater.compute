// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

struct Vertice
{
    float3 position;
    //float4 color;
};

float4 a;
float4 w;
float t;
float4 u;
int n;

RWStructuredBuffer<Vertice> vertices;

//float resolution = 100;

//float rand(float2 co)
//{
//    return(frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
//}

// calculating sum of sines for the vertex, y-position
float y(float3 pos)
{
    float x = 0;

    x += a.x * sin((pos.z) * w.x + (t + pos.x) * u.x);
    x += a.y * sin((pos.x) * w.y + (t + pos.z) * u.y);
    x += a.z * sin((pos.z) * w.z + (t + pos.x) * u.z);
    x += a.w * sin((pos.x) * w.w + (t + pos.z) * u.w);

    return x * 1;
}

//[numthreads(8,8,1)]
[numthreads(10, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //float xPos = id.x / resolution;

    Vertice vertex = vertices[id.x];

    //float height = rand(float2(xPos, vertex.position.y));
    float height = y(vertex.position);
    vertex.position.y = vertex.position.y + height;

    //vertex.color = float4(xPos, rand(float2(xPos, vertex.position.y)), rand(float2(xPos, vertex.position.y)), 1.0);

    vertices[id.x] = vertex;
    //Result[id.xy] = float4(x, y, 0.0, 0.0);
}
